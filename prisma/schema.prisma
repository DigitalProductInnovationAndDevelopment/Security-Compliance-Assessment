generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          String        @default("assessee")
  accounts      Account[]
  sessions      Session[]
  assessments   Assessment[]
  projects      UserProject[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Standard {
  practice     String
  requirements String[]
  standard_id  String
  artefactId   Int
  artefacts    String[]
  id           Int      @id @default(autoincrement())
  artefact     Artefact @relation(fields: [artefactId], references: [id])

  @@unique([standard_id, practice, artefactId])
}

model Artefact {
  id                       Int                  @id @default(autoincrement())
  artefact_id              String
  artefact_name            String
  stage                    String
  description              String
  in_project               Boolean
  origin_standard          Boolean
  origin_practice          Boolean
  origin_literature_review Boolean
  automation               String
  artefact_area_id         String
  areaId                   Int
  artefact_area            Area                 @relation(fields: [areaId], references: [id])
  standards                Standard[]
  AssessmentArtefact       AssessmentArtefact[]
  Score                    Score[]

  @@unique([artefact_id, artefact_name, stage])
}

model Area {
  id                   Int              @id @default(autoincrement())
  area_id              String
  area_name            String
  people               String
  process              String
  technology           String
  people_practices     String[]
  process_practices    String[]
  technology_practices String[]
  roles                String[]
  question             String?
  assessors_guide      String?
  stageId              Int
  stage                Stage            @relation(fields: [stageId], references: [id])
  artefacts            Artefact[]
  AssessmentArea       AssessmentArea[]
  Score                Score[]

  @@unique([area_id, area_name, stageId])
}

model Stage {
  stageNumber Int
  id          Int     @id @default(autoincrement())
  name        String  @unique
  areas       Area[]
  Score       Score[]
}

// New Models

model Project {
  id          Int           @id @default(autoincrement())
  projectId   String        @unique
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  assessments Assessment[]
  users       UserProject[]
}

model UserProject {
  userId    String
  projectId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
}

model Assessment {
  id        Int                  @id @default(autoincrement())
  projectId Int
  userId    String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  project   Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id])
  artefacts AssessmentArtefact[]
  areas     AssessmentArea[]
  Score     Score[]
}

model AssessmentArtefact {
  id           Int        @id @default(autoincrement())
  artefactId   Int
  assessmentId Int
  checkmark    Boolean
  comment      String?
  artefact     Artefact   @relation(fields: [artefactId], references: [id])
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([artefactId, assessmentId])
}

model AssessmentArea {
  id           Int                      @id @default(autoincrement())
  areaId       Int
  assessmentId Int
  comment      String?
  score        Float
  area         Area                     @relation(fields: [areaId], references: [id])
  assessment   Assessment               @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  questions    AssessmentAreaQuestion[]

  @@unique([areaId, assessmentId])
}

model AssessmentAreaQuestion {
  id               Int            @id @default(autoincrement())
  assessmentAreaId Int
  question         String
  answer           Int?
  assessmentArea   AssessmentArea @relation(fields: [assessmentAreaId], references: [id], onDelete: Cascade)
}

model Score {
  id           Int        @id @default(autoincrement())
  assessmentId Int
  areaId       Int?
  artefactId   Int?
  stageId      Int?
  score        Float
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  area         Area?      @relation(fields: [areaId], references: [id])
  artefact     Artefact?  @relation(fields: [artefactId], references: [id])
  stage        Stage?     @relation(fields: [stageId], references: [id])

  @@unique([assessmentId, areaId, artefactId, stageId])
}
