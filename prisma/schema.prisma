// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Standard {
  id                  String    @id @default(uuid())
  standard_id         String?
  practice            String
  requirements        String[]
  artefactsList       String[]
  artefactArtefact_id String?
  Artefact            Artefact? @relation(fields: [artefactArtefact_id], references: [artefact_id])
}

model Artefact {
  artefact_id              String                 @id @default(uuid())
  artefact_name            String
  artefact_area_id         String
  stage                    String
  description              String
  in_project               Boolean?
  origin_standard          Boolean?
  origin_practice          Boolean?
  origin_literature_review Boolean?
  automation               String
  standards                Standard[]
  area                     Area                   @relation(fields: [artefact_area_id], references: [area_id])
  projectArtefactScores    ProjectArtefactScore[]
}

model Area {
  area_id              String     @id @default(uuid())
  area_name            String
  stage                String
  people               String
  process              String
  technology           String
  people_practices     String[]
  process_practices    String[]
  technology_practices String[]
  roles                String[]
  artefacts            Artefact[]
  question             String
  assessors_guide      String
  stageRelation        Stage      @relation(fields: [stage], references: [stage])
}

model Stage {
  stage String @id
  areas Area[]
}

model Project {
  id                    String                 @id @default(uuid())
  name                  String
  projectArtefactScores ProjectArtefactScore[]
}

model ProjectArtefactScore {
  id         String   @id @default(uuid())
  projectId  String
  artefactId String
  score      Int
  project    Project  @relation(fields: [projectId], references: [id])
  artefact   Artefact @relation(fields: [artefactId], references: [artefact_id])
}
