generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("assessee")
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  projects      Project[]    @relation("UserProjects")
  assessments   Assessment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Standard {
  practice     String
  requirements String[]
  standard_id  String
  artefactId   Int
  artefacts    String[]
  id           Int      @id @default(autoincrement())
  artefact     Artefact @relation(fields: [artefactId], references: [id])

  @@unique([standard_id, practice, artefactId])
}

model Artefact {
  id                       Int        @id @default(autoincrement())
  artefact_id              String
  artefact_name            String
  stage                    String
  description              String
  in_project               Boolean
  origin_standard          Boolean
  origin_practice          Boolean
  origin_literature_review Boolean
  automation               String
  artefact_area_id         String
  areaId                   Int
  artefact_area            Area       @relation(fields: [areaId], references: [id])
  standards                Standard[]
  answersArtefact          AnswerArtefact[]

  @@unique([artefact_id, artefact_name, stage])
}

model Area {
  id                   Int        @id @default(autoincrement())
  area_id              String
  area_name            String
  people               String
  process              String
  technology           String
  people_practices     String[]
  process_practices    String[]
  technology_practices String[]
  roles                String[]
  questions            Question[]
  assessors_guide      String?
  stageId              Int
  stage                Stage      @relation(fields: [stageId], references: [id])
  artefacts            Artefact[]

  @@unique([area_id, area_name, stageId])
}

model Stage {
  stageNumber Int
  id          Int    @id @default(autoincrement())
  name        String @unique
  areas       Area[]
}

// Added tables for Assessment

model Project {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  archived      Boolean
  participants  User[]      @relation("UserProjects")
  created_at    DateTime    @default(now())
  assessments   Assessment[]
}

model Assessment {
  userId                    String
  projectId                 Int
  user                      User       @relation(fields: [userId], references: [id])
  project                   Project    @relation(fields: [projectId], references: [id])
  areasMaturityScore        Float
  artefactCompletenessScore Float
  areaCompletenessScore     Float
  answersArea               AnswerAreaQuestion[]
  answersArtefact           AnswerArtefact[]
  stagesScores              StageScore[]
  areasScores               AreaScore[]

  @@id([userId, projectId])
}

model StageScore {
  id                        Int       @id @default(autoincrement())
  stageId                   Int
  assessmentId              Int
  artefactsCompletenessScore Int
  areaMaturityScore         Int
  areaCompletenessScore     Int
  stage                     Stage     @relation(fields: [stageId], references: [id])
  assessment                Assessment @relation(fields: [assessmentId], references: [userId, projectId])
}

model Question {
  id          Int             @id @default(autoincrement())
  body        String
  areas       Area[]
  answerAreaQuestions AnswerAreaQuestion[]
}

model AnswerAreaQuestion {
  id            Int         @id @default(autoincrement())
  questionId    Int
  assessmentId  Int
  assessedScore Int
  answered      Boolean
  comment       String
  created_at    DateTime    @default(now())
  question      Question    @relation(fields: [questionId], references: [id])
  assessment    Assessment  @relation(fields: [assessmentId], references: [userId, projectId])
}

model AnswerArtefact {
  id            Int        @id @default(autoincrement())
  assessmentId  Int
  artefactId    Int
  comment       String
  answered      Boolean
  answer        Boolean
  created_at    DateTime   @default(now())
  assessment    Assessment @relation(fields: [assessmentId], references: [userId, projectId])
  artefact      Artefact   @relation(fields: [artefactId], references: [id])
}

model AreaScore {
  id                          Int        @id @default(autoincrement())
  areaId                      Int
  assessmentId                Int
  artefactsCompletenessScore  Float
  areaMaturityScore           Float
  areaCompletenessScore       Float
  area                        Area       @relation(fields: [areaId], references: [id])
  assessment                  Assessment @relation(fields: [assessmentId], references: [userId, projectId])
}
